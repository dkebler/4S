// Returns $list as a string
// -------------------------------------------------------------------------------
// @documentation http://hugogiraudel.com/2013/10/21/sass-debug/
// -------------------------------------------------------------------------------
// @example debug(a b c d e)   => [ a, b, c, d, e ]
// @example debug(a b (c d e)) => [ a, b, [ c, d, e ] ]
// -------------------------------------------------------------------------------
// @param $list [List] : list
// @param $pre [Boolean] : enable/disable variables type and proper indentation
// @param $level [Number] : internal variable for recursivity
// -------------------------------------------------------------------------------
// @return [String]

@function debug($list, $pre: false, $level: 1) {
    $tab: "    ";
    $indent: "";
    $break: if($pre, "\A ", "");
  
    @if length($list) == 0 {
        @return "( )";
    }
  
    @if length($list) == 1 {
        @return if($pre,  "(" + type-of($list) + ") ", "") + $list;
    }

    @for $i from 1 to $level {
        $indent: $indent + $tab;
    }

    $result: "[" + $break;

    @for $i from 1 through length($list) {
        $item: nth($list, $i);
        $result: $result + if($pre, $indent + $tab, " ");

        @if length($item) > 1 {
            $result: $result 
                + if($pre, "(list: " + length($item) + ") ", "") 
                + debug($item, $pre, $level + 1);
        }

        @else {
            @if $pre {
                $result: $result + "(" + type-of($item) + ") ";
            }
      
            @if length($item) == 0 {
                $result: $result + "( )";
            }
      
            @else if type-of($item) == string {
                $result: $result + quote($item);
            }
      
            @else if $item == null {
                $result: $result + "null";
            }
      
            @else {
                $result: $result + $item;
            }
        }
    
        @if $i != length($list) {
            $result: $result + "," + $break;
        }
    }

    $result: $result + $break + if($pre, if($level > 1, $indent, ""), " ") + "]";

    @return quote($result);
}

//////////////////////////////
// Color Is Dark
//
// Checks to see if the input color is a dark color taking into account both lightness and hue.
// Suitable for determining, for instance, if a background should have a dark or light text color.
// @return true/false (boolean)
//////////////////////////////
@function color-is-dark($color) {
@if (lightness($color) < 60% and (hue($color) >= 210 or hue($color) <= 27)) or (lightness($color) <= 32%) {
@return true;
} @else {
@return false;
}
}

// Mixin displaying clean debug
// -------------------------------------------------------------------------------
// @param $list [List] : list

$debug-bg-color: #5D0C1A;
$debug-font-size: ms(0);
$debug-verbose: true;
$debug-location: body;  // an html tag, like body, header, footer, content, aside
$debug-position: before;  // before or after only
$debug-list:'DEBUG_ON-see-utils/_debug.scss';
  // before or after

@mixin debug($list) {
    #{$debug-location}:#{$debug-position} {
 //    body:before {    
        content: debug($list, $debug-verbose) !important;
        display: block                            !important;
        margin: 1em                               !important;
        padding: .5em                             !important; 
        background: $debug-bg-color              !important;
        @if color-is-dark($debug-bg-color) == true
        {color:white !important;}
          @else 
        { color:black !important;}
        border: 1px solid #DDD                    !important;
        border-radius: .2em                       !important;
        font: $debug-font-size "Courier New", monospace  !important;
        text-shadow: 0 1px white                  !important;
        white-space: pre-wrap                     !important;
    }
}


// keep adding to a list of debug items using join 
// $debug-list: join($debug-list, '---LOCATION-example.scss:109'); 
// $debug-list: join($debug-list, (debug-bg-color $debug-bg-color, debug-font-size $debug-font-size));
////  imagine a bunch more code here then add to the list of items to display somewhere else.
// $debug-list: join($debug-list, '---LOCATION-example2.scss:15'); 
// $debug-list: join($debug-list, (debug-verbose $debug-verbose, debug-location $debug-location));





